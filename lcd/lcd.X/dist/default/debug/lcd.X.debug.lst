

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Sun Apr 27 13:07:56 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F458
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19   000000                     
    20                           ; Generated 17/01/2025 GMT
    21                           ; 
    22                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F458 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54   000FE0                     bsr             equ	4064
    55   000FE9                     fsr0            equ	4073
    56   000FEA                     fsr0h           equ	4074
    57   000FE9                     fsr0l           equ	4073
    58   000FE1                     fsr1            equ	4065
    59   000FE2                     fsr1h           equ	4066
    60   000FE1                     fsr1l           equ	4065
    61   000FD9                     fsr2            equ	4057
    62   000FDA                     fsr2h           equ	4058
    63   000FD9                     fsr2l           equ	4057
    64   000FEF                     indf0           equ	4079
    65   000FE7                     indf1           equ	4071
    66   000FDF                     indf2           equ	4063
    67   000FF2                     intcon          equ	4082
    68   000000                     nvmcon          equ	0
    69   000FF9                     pcl             equ	4089
    70   000FFA                     pclath          equ	4090
    71   000FFB                     pclatu          equ	4091
    72   000FEB                     plusw0          equ	4075
    73   000FE3                     plusw1          equ	4067
    74   000FDB                     plusw2          equ	4059
    75   000FED                     postdec0        equ	4077
    76   000FE5                     postdec1        equ	4069
    77   000FDD                     postdec2        equ	4061
    78   000FEE                     postinc0        equ	4078
    79   000FE6                     postinc1        equ	4070
    80   000FDE                     postinc2        equ	4062
    81   000FEC                     preinc0         equ	4076
    82   000FE4                     preinc1         equ	4068
    83   000FDC                     preinc2         equ	4060
    84   000FF3                     prod            equ	4083
    85   000FF4                     prodh           equ	4084
    86   000FF3                     prodl           equ	4083
    87   000FD8                     status          equ	4056
    88   000FF5                     tablat          equ	4085
    89   000FF6                     tblptr          equ	4086
    90   000FF7                     tblptrh         equ	4087
    91   000FF6                     tblptrl         equ	4086
    92   000FF8                     tblptru         equ	4088
    93   000FFD                     tosl            equ	4093
    94   000FE8                     wreg            equ	4072
    95   000F00                     RXF0SIDH        equ	3840	;# 
    96   000F01                     RXF0SIDL        equ	3841	;# 
    97   000F02                     RXF0EIDH        equ	3842	;# 
    98   000F03                     RXF0EIDL        equ	3843	;# 
    99   000F04                     RXF1SIDH        equ	3844	;# 
   100   000F05                     RXF1SIDL        equ	3845	;# 
   101   000F06                     RXF1EIDH        equ	3846	;# 
   102   000F07                     RXF1EIDL        equ	3847	;# 
   103   000F08                     RXF2SIDH        equ	3848	;# 
   104   000F09                     RXF2SIDL        equ	3849	;# 
   105   000F0A                     RXF2EIDH        equ	3850	;# 
   106   000F0B                     RXF2EIDL        equ	3851	;# 
   107   000F0C                     RXF3SIDH        equ	3852	;# 
   108   000F0D                     RXF3SIDL        equ	3853	;# 
   109   000F0E                     RXF3EIDH        equ	3854	;# 
   110   000F0F                     RXF3EIDL        equ	3855	;# 
   111   000F10                     RXF4SIDH        equ	3856	;# 
   112   000F11                     RXF4SIDL        equ	3857	;# 
   113   000F12                     RXF4EIDH        equ	3858	;# 
   114   000F13                     RXF4EIDL        equ	3859	;# 
   115   000F14                     RXF5SIDH        equ	3860	;# 
   116   000F15                     RXF5SIDL        equ	3861	;# 
   117   000F16                     RXF5EIDH        equ	3862	;# 
   118   000F17                     RXF5EIDL        equ	3863	;# 
   119   000F18                     RXM0SIDH        equ	3864	;# 
   120   000F19                     RXM0SIDL        equ	3865	;# 
   121   000F1A                     RXM0EIDH        equ	3866	;# 
   122   000F1B                     RXM0EIDL        equ	3867	;# 
   123   000F1C                     RXM1SIDH        equ	3868	;# 
   124   000F1D                     RXM1SIDL        equ	3869	;# 
   125   000F1E                     RXM1EIDH        equ	3870	;# 
   126   000F1F                     RXM1EIDL        equ	3871	;# 
   127   000F20                     TXB2CON         equ	3872	;# 
   128   000F21                     TXB2SIDH        equ	3873	;# 
   129   000F22                     TXB2SIDL        equ	3874	;# 
   130   000F23                     TXB2EIDH        equ	3875	;# 
   131   000F24                     TXB2EIDL        equ	3876	;# 
   132   000F25                     TXB2DLC         equ	3877	;# 
   133   000F26                     TXB2D0          equ	3878	;# 
   134   000F27                     TXB2D1          equ	3879	;# 
   135   000F28                     TXB2D2          equ	3880	;# 
   136   000F29                     TXB2D3          equ	3881	;# 
   137   000F2A                     TXB2D4          equ	3882	;# 
   138   000F2B                     TXB2D5          equ	3883	;# 
   139   000F2C                     TXB2D6          equ	3884	;# 
   140   000F2D                     TXB2D7          equ	3885	;# 
   141   000F2E                     CANSTATRO4      equ	3886	;# 
   142   000F30                     TXB1CON         equ	3888	;# 
   143   000F31                     TXB1SIDH        equ	3889	;# 
   144   000F32                     TXB1SIDL        equ	3890	;# 
   145   000F33                     TXB1EIDH        equ	3891	;# 
   146   000F34                     TXB1EIDL        equ	3892	;# 
   147   000F35                     TXB1DLC         equ	3893	;# 
   148   000F36                     TXB1D0          equ	3894	;# 
   149   000F37                     TXB1D1          equ	3895	;# 
   150   000F38                     TXB1D2          equ	3896	;# 
   151   000F39                     TXB1D3          equ	3897	;# 
   152   000F3A                     TXB1D4          equ	3898	;# 
   153   000F3B                     TXB1D5          equ	3899	;# 
   154   000F3C                     TXB1D6          equ	3900	;# 
   155   000F3D                     TXB1D7          equ	3901	;# 
   156   000F3E                     CANSTATRO3      equ	3902	;# 
   157   000F40                     TXB0CON         equ	3904	;# 
   158   000F41                     TXB0SIDH        equ	3905	;# 
   159   000F42                     TXB0SIDL        equ	3906	;# 
   160   000F43                     TXB0EIDH        equ	3907	;# 
   161   000F44                     TXB0EIDL        equ	3908	;# 
   162   000F45                     TXB0DLC         equ	3909	;# 
   163   000F46                     TXB0D0          equ	3910	;# 
   164   000F47                     TXB0D1          equ	3911	;# 
   165   000F48                     TXB0D2          equ	3912	;# 
   166   000F49                     TXB0D3          equ	3913	;# 
   167   000F4A                     TXB0D4          equ	3914	;# 
   168   000F4B                     TXB0D5          equ	3915	;# 
   169   000F4C                     TXB0D6          equ	3916	;# 
   170   000F4D                     TXB0D7          equ	3917	;# 
   171   000F4E                     CANSTATRO2      equ	3918	;# 
   172   000F50                     RXB1CON         equ	3920	;# 
   173   000F51                     RXB1SIDH        equ	3921	;# 
   174   000F52                     RXB1SIDL        equ	3922	;# 
   175   000F53                     RXB1EIDH        equ	3923	;# 
   176   000F54                     RXB1EIDL        equ	3924	;# 
   177   000F55                     RXB1DLC         equ	3925	;# 
   178   000F56                     RXB1D0          equ	3926	;# 
   179   000F57                     RXB1D1          equ	3927	;# 
   180   000F58                     RXB1D2          equ	3928	;# 
   181   000F59                     RXB1D3          equ	3929	;# 
   182   000F5A                     RXB1D4          equ	3930	;# 
   183   000F5B                     RXB1D5          equ	3931	;# 
   184   000F5C                     RXB1D6          equ	3932	;# 
   185   000F5D                     RXB1D7          equ	3933	;# 
   186   000F5E                     CANSTATRO1      equ	3934	;# 
   187   000F60                     RXB0CON         equ	3936	;# 
   188   000F61                     RXB0SIDH        equ	3937	;# 
   189   000F62                     RXB0SIDL        equ	3938	;# 
   190   000F63                     RXB0EIDH        equ	3939	;# 
   191   000F64                     RXB0EIDL        equ	3940	;# 
   192   000F65                     RXB0DLC         equ	3941	;# 
   193   000F66                     RXB0D0          equ	3942	;# 
   194   000F67                     RXB0D1          equ	3943	;# 
   195   000F68                     RXB0D2          equ	3944	;# 
   196   000F69                     RXB0D3          equ	3945	;# 
   197   000F6A                     RXB0D4          equ	3946	;# 
   198   000F6B                     RXB0D5          equ	3947	;# 
   199   000F6C                     RXB0D6          equ	3948	;# 
   200   000F6D                     RXB0D7          equ	3949	;# 
   201   000F6E                     CANSTAT         equ	3950	;# 
   202   000F6F                     CANCON          equ	3951	;# 
   203   000F70                     BRGCON1         equ	3952	;# 
   204   000F71                     BRGCON2         equ	3953	;# 
   205   000F72                     BRGCON3         equ	3954	;# 
   206   000F73                     CIOCON          equ	3955	;# 
   207   000F74                     COMSTAT         equ	3956	;# 
   208   000F75                     RXERRCNT        equ	3957	;# 
   209   000F76                     TXERRCNT        equ	3958	;# 
   210   000F80                     PORTA           equ	3968	;# 
   211   000F81                     PORTB           equ	3969	;# 
   212   000F82                     PORTC           equ	3970	;# 
   213   000F83                     PORTD           equ	3971	;# 
   214   000F84                     PORTE           equ	3972	;# 
   215   000F89                     LATA            equ	3977	;# 
   216   000F8A                     LATB            equ	3978	;# 
   217   000F8B                     LATC            equ	3979	;# 
   218   000F8C                     LATD            equ	3980	;# 
   219   000F8D                     LATE            equ	3981	;# 
   220   000F92                     TRISA           equ	3986	;# 
   221   000F92                     DDRA            equ	3986	;# 
   222   000F93                     TRISB           equ	3987	;# 
   223   000F93                     DDRB            equ	3987	;# 
   224   000F94                     TRISC           equ	3988	;# 
   225   000F94                     DDRC            equ	3988	;# 
   226   000F95                     TRISD           equ	3989	;# 
   227   000F95                     DDRD            equ	3989	;# 
   228   000F96                     TRISE           equ	3990	;# 
   229   000F96                     DDRE            equ	3990	;# 
   230   000F9D                     PIE1            equ	3997	;# 
   231   000F9E                     PIR1            equ	3998	;# 
   232   000F9F                     IPR1            equ	3999	;# 
   233   000FA0                     PIE2            equ	4000	;# 
   234   000FA1                     PIR2            equ	4001	;# 
   235   000FA2                     IPR2            equ	4002	;# 
   236   000FA3                     PIE3            equ	4003	;# 
   237   000FA4                     PIR3            equ	4004	;# 
   238   000FA5                     IPR3            equ	4005	;# 
   239   000FA6                     EECON1          equ	4006	;# 
   240   000FA7                     EECON2          equ	4007	;# 
   241   000FA8                     EEDATA          equ	4008	;# 
   242   000FA9                     EEADR           equ	4009	;# 
   243   000FAB                     RCSTA           equ	4011	;# 
   244   000FAB                     RCSTA1          equ	4011	;# 
   245   000FAC                     TXSTA           equ	4012	;# 
   246   000FAC                     TXSTA1          equ	4012	;# 
   247   000FAD                     TXREG           equ	4013	;# 
   248   000FAD                     TXREG1          equ	4013	;# 
   249   000FAE                     RCREG           equ	4014	;# 
   250   000FAE                     RCREG1          equ	4014	;# 
   251   000FAF                     SPBRG           equ	4015	;# 
   252   000FAF                     SPBRG1          equ	4015	;# 
   253   000FB1                     T3CON           equ	4017	;# 
   254   000FB2                     TMR3            equ	4018	;# 
   255   000FB2                     TMR3L           equ	4018	;# 
   256   000FB3                     TMR3H           equ	4019	;# 
   257   000FB4                     CMCON           equ	4020	;# 
   258   000FB5                     CVRCON          equ	4021	;# 
   259   000FB6                     ECCPAS          equ	4022	;# 
   260   000FB7                     ECCP1DEL        equ	4023	;# 
   261   000FBA                     ECCP1CON        equ	4026	;# 
   262   000FBB                     ECCPR1          equ	4027	;# 
   263   000FBB                     ECCPR1L         equ	4027	;# 
   264   000FBC                     ECCPR1H         equ	4028	;# 
   265   000FBD                     CCP1CON         equ	4029	;# 
   266   000FBE                     CCPR1           equ	4030	;# 
   267   000FBE                     CCPR1L          equ	4030	;# 
   268   000FBF                     CCPR1H          equ	4031	;# 
   269   000FC1                     ADCON1          equ	4033	;# 
   270   000FC2                     ADCON0          equ	4034	;# 
   271   000FC3                     ADRES           equ	4035	;# 
   272   000FC3                     ADRESL          equ	4035	;# 
   273   000FC4                     ADRESH          equ	4036	;# 
   274   000FC5                     SSPCON2         equ	4037	;# 
   275   000FC6                     SSPCON1         equ	4038	;# 
   276   000FC7                     SSPSTAT         equ	4039	;# 
   277   000FC8                     SSPADD          equ	4040	;# 
   278   000FC9                     SSPBUF          equ	4041	;# 
   279   000FCA                     T2CON           equ	4042	;# 
   280   000FCB                     PR2             equ	4043	;# 
   281   000FCB                     MEMCON          equ	4043	;# 
   282   000FCC                     TMR2            equ	4044	;# 
   283   000FCD                     T1CON           equ	4045	;# 
   284   000FCE                     TMR1            equ	4046	;# 
   285   000FCE                     TMR1L           equ	4046	;# 
   286   000FCF                     TMR1H           equ	4047	;# 
   287   000FD0                     RCON            equ	4048	;# 
   288   000FD1                     WDTCON          equ	4049	;# 
   289   000FD2                     LVDCON          equ	4050	;# 
   290   000FD3                     OSCCON          equ	4051	;# 
   291   000FD5                     T0CON           equ	4053	;# 
   292   000FD6                     TMR0            equ	4054	;# 
   293   000FD6                     TMR0L           equ	4054	;# 
   294   000FD7                     TMR0H           equ	4055	;# 
   295   000FD8                     STATUS          equ	4056	;# 
   296   000FD9                     FSR2            equ	4057	;# 
   297   000FD9                     FSR2L           equ	4057	;# 
   298   000FDA                     FSR2H           equ	4058	;# 
   299   000FDB                     PLUSW2          equ	4059	;# 
   300   000FDC                     PREINC2         equ	4060	;# 
   301   000FDD                     POSTDEC2        equ	4061	;# 
   302   000FDE                     POSTINC2        equ	4062	;# 
   303   000FDF                     INDF2           equ	4063	;# 
   304   000FE0                     BSR             equ	4064	;# 
   305   000FE1                     FSR1            equ	4065	;# 
   306   000FE1                     FSR1L           equ	4065	;# 
   307   000FE2                     FSR1H           equ	4066	;# 
   308   000FE3                     PLUSW1          equ	4067	;# 
   309   000FE4                     PREINC1         equ	4068	;# 
   310   000FE5                     POSTDEC1        equ	4069	;# 
   311   000FE6                     POSTINC1        equ	4070	;# 
   312   000FE7                     INDF1           equ	4071	;# 
   313   000FE8                     WREG            equ	4072	;# 
   314   000FE9                     FSR0            equ	4073	;# 
   315   000FE9                     FSR0L           equ	4073	;# 
   316   000FEA                     FSR0H           equ	4074	;# 
   317   000FEB                     PLUSW0          equ	4075	;# 
   318   000FEC                     PREINC0         equ	4076	;# 
   319   000FED                     POSTDEC0        equ	4077	;# 
   320   000FEE                     POSTINC0        equ	4078	;# 
   321   000FEF                     INDF0           equ	4079	;# 
   322   000FF0                     INTCON3         equ	4080	;# 
   323   000FF1                     INTCON2         equ	4081	;# 
   324   000FF2                     INTCON          equ	4082	;# 
   325   000FF2                     INTCON1         equ	4082	;# 
   326   000FF3                     PROD            equ	4083	;# 
   327   000FF3                     PRODL           equ	4083	;# 
   328   000FF4                     PRODH           equ	4084	;# 
   329   000FF5                     TABLAT          equ	4085	;# 
   330   000FF6                     TBLPTR          equ	4086	;# 
   331   000FF6                     TBLPTRL         equ	4086	;# 
   332   000FF7                     TBLPTRH         equ	4087	;# 
   333   000FF8                     TBLPTRU         equ	4088	;# 
   334   000FF9                     PCLAT           equ	4089	;# 
   335   000FF9                     PC              equ	4089	;# 
   336   000FF9                     PCL             equ	4089	;# 
   337   000FFA                     PCLATH          equ	4090	;# 
   338   000FFB                     PCLATU          equ	4091	;# 
   339   000FFC                     STKPTR          equ	4092	;# 
   340   000FFD                     TOS             equ	4093	;# 
   341   000FFD                     TOSL            equ	4093	;# 
   342   000FFE                     TOSH            equ	4094	;# 
   343   000FFF                     TOSU            equ	4095	;# 
   344                           
   345                           	psect	idataCOMRAM
   346   0007CC                     __pidataCOMRAM:
   347                           	callstack 0
   348                           
   349                           ;initializer for main@F5595
   350   0007CC  50                 	db	80
   351   0007CD  72                 	db	114
   352   0007CE  61                 	db	97
   353   0007CF  63                 	db	99
   354   0007D0  74                 	db	116
   355   0007D1  69                 	db	105
   356   0007D2  63                 	db	99
   357   0007D3  61                 	db	97
   358   0007D4  6C                 	db	108
   359   0007D5  20                 	db	32
   360   0007D6  37                 	db	55
   361   0007D7  00                 	db	0
   362                           
   363                           ;initializer for main@F5597
   364   0007D8  42                 	db	66
   365   0007D9  79                 	db	121
   366   0007DA  20                 	db	32
   367   0007DB  41                 	db	65
   368   0007DC  73                 	db	115
   369   0007DD  68                 	db	104
   370   0007DE  77                 	db	119
   371   0007DF  69                 	db	105
   372   0007E0  6E                 	db	110
   373   0007E1  00                 	db	0
   374   000F84                     _PORTEbits      set	3972
   375   000F83                     _PORTD          set	3971
   376   000F96                     _TRISE          set	3990
   377   000F95                     _TRISD          set	3989
   378   000FC1                     _ADCON1         set	4033
   379                           
   380                           ; #config settings
   381                           
   382                           	psect	cinit
   383   000766                     __pcinit:
   384                           	callstack 0
   385   000766                     start_initialization:
   386                           	callstack 0
   387   000766                     __initialization:
   388                           	callstack 0
   389                           
   390                           ; Initialize objects allocated to COMRAM (22 bytes)
   391                           ; load TBLPTR registers with __pidataCOMRAM
   392   000766  0ECC               	movlw	low __pidataCOMRAM
   393   000768  6EF6               	movwf	tblptrl,c
   394   00076A  0E07               	movlw	high __pidataCOMRAM
   395   00076C  6EF7               	movwf	tblptrh,c
   396   00076E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   397   000770  6EF8               	movwf	tblptru,c
   398   000772  EE00  F021         	lfsr	0,__pdataCOMRAM
   399   000776  EE10 F016          	lfsr	1,22
   400   00077A                     copy_data0:
   401   00077A  0009               	tblrd		*+
   402   00077C  CFF5 FFEE          	movff	tablat,postinc0
   403   000780  50E5               	movf	postdec1,w,c
   404   000782  50E1               	movf	fsr1l,w,c
   405   000784  E1FA               	bnz	copy_data0
   406   000786                     end_of_initialization:
   407                           	callstack 0
   408   000786                     __end_of__initialization:
   409                           	callstack 0
   410   000786  0100               	movlb	0
   411   000788  EF01  F003         	goto	_main	;jump to C main() function
   412                           
   413                           	psect	dataCOMRAM
   414   000021                     __pdataCOMRAM:
   415                           	callstack 0
   416   000021                     main@F5595:
   417                           	callstack 0
   418   000021                     	ds	12
   419   00002D                     main@F5597:
   420                           	callstack 0
   421   00002D                     	ds	10
   422                           
   423                           	psect	cstackCOMRAM
   424   000001                     __pcstackCOMRAM:
   425                           	callstack 0
   426   000001                     msdelay@time:
   427                           	callstack 0
   428                           
   429                           ; 2 bytes @ 0x0
   430   000001                     	ds	2
   431   000003                     msdelay@i:
   432                           	callstack 0
   433   000003                     
   434                           ; 1 bytes @ 0x2
   435   000003                     	ds	2
   436   000005                     msdelay@j:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x4
   440   000005                     	ds	2
   441   000007                     LCD_command@cmd:
   442                           	callstack 0
   443   000007                     LCD_data@data:
   444                           	callstack 0
   445   000007                     
   446                           ; 1 bytes @ 0x6
   447   000007                     	ds	1
   448   000008                     LCD_write_string@str:
   449                           	callstack 0
   450   000008                     
   451                           ; 1 bytes @ 0x7
   452   000008                     	ds	1
   453   000009                     LCD_write_string@i:
   454                           	callstack 0
   455   000009                     
   456                           ; 1 bytes @ 0x8
   457   000009                     	ds	2
   458   00000B                     main@var1:
   459                           	callstack 0
   460   00000B                     
   461                           ; 1 bytes @ 0xA
   462   00000B                     	ds	12
   463   000017                     main@var2:
   464                           	callstack 0
   465                           
   466                           ; 10 bytes @ 0x16
   467   000017                     	ds	10
   468                           
   469 ;;
   470 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   471 ;;
   472 ;; *************** function _main *****************
   473 ;; Defined at:
   474 ;;		line 23 in file "main.c"
   475 ;; Parameters:    Size  Location     Type
   476 ;;		None
   477 ;; Auto vars:     Size  Location     Type
   478 ;;  var1           12   10[COMRAM] unsigned char [12]
   479 ;;  var2           10   22[COMRAM] unsigned char [10]
   480 ;; Return value:  Size  Location     Type
   481 ;;                  1    wreg      void 
   482 ;; Registers used:
   483 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   484 ;; Tracked objects:
   485 ;;		On entry : 0/0
   486 ;;		On exit  : 0/0
   487 ;;		Unchanged: 0/0
   488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   489 ;;      Params:         0       0       0       0       0       0       0
   490 ;;      Locals:        22       0       0       0       0       0       0
   491 ;;      Temps:          0       0       0       0       0       0       0
   492 ;;      Totals:        22       0       0       0       0       0       0
   493 ;;Total ram usage:       22 bytes
   494 ;; Hardware stack levels required when called: 3
   495 ;; This function calls:
   496 ;;		_LCD_command
   497 ;;		_LCD_write_string
   498 ;;		_init_LCD
   499 ;;		_msdelay
   500 ;; This function is called by:
   501 ;;		Startup code after reset
   502 ;; This function uses a non-reentrant model
   503 ;;
   504                           
   505                           	psect	text0
   506   000602                     __ptext0:
   507                           	callstack 0
   508   000602                     _main:
   509                           	callstack 28
   510   000602  FFFF               	dw	65535	; assembler added errata NOP
   511                           
   512                           ;main.c: 24:     char var1[] = "Practical 7";
   513   000604  EE20  F021         	lfsr	2,main@F5595
   514   000608  EE10  F00B         	lfsr	1,main@var1
   515   00060C  0E0B               	movlw	11
   516   00060E                     u91:
   517   00060E  CFDB FFE3          	movff	plusw2,plusw1
   518   000612  06E8               	decf	wreg,f,c
   519   000614  E2FC               	bc	u91
   520                           
   521                           ;main.c: 25:     char var2[] = "By Ashwin";
   522   000616  EE20  F02D         	lfsr	2,main@F5597
   523   00061A  EE10  F017         	lfsr	1,main@var2
   524   00061E  0E09               	movlw	9
   525   000620                     u101:
   526   000620  CFDB FFE3          	movff	plusw2,plusw1
   527   000624  06E8               	decf	wreg,f,c
   528   000626  E2FC               	bc	u101
   529   000628                     
   530                           ;main.c: 28:     ADCON1 = 0x0F;
   531   000628  0E0F               	movlw	15
   532   00062A  6EC1               	movwf	193,c	;volatile
   533   00062C                     
   534                           ;main.c: 31:     TRISD = 0x00;
   535   00062C  6A95               	clrf	149,c	;volatile
   536   00062E                     
   537                           ;main.c: 32:     TRISE = 0x00;
   538   00062E  6A96               	clrf	150,c	;volatile
   539   000630                     
   540                           ;main.c: 34:     init_LCD();
   541   000630  EC8C  F003         	call	_init_LCD	;wreg free
   542   000634                     
   543                           ;main.c: 35:     msdelay(50);
   544   000634  0E00               	movlw	0
   545   000636  6E02               	movwf	(msdelay@time+1)^0,c
   546   000638  0E32               	movlw	50
   547   00063A  6E01               	movwf	msdelay@time^0,c
   548   00063C  EC36  F003         	call	_msdelay	;wreg free
   549   000640                     
   550                           ;main.c: 37:     LCD_write_string(var1);
   551   000640  0E0B               	movlw	low main@var1
   552   000642  6E08               	movwf	LCD_write_string@str^0,c
   553   000644  EC64  F003         	call	_LCD_write_string	;wreg free
   554   000648                     
   555                           ;main.c: 38:     msdelay(150);
   556   000648  0E00               	movlw	0
   557   00064A  6E02               	movwf	(msdelay@time+1)^0,c
   558   00064C  0E96               	movlw	150
   559   00064E  6E01               	movwf	msdelay@time^0,c
   560   000650  EC36  F003         	call	_msdelay	;wreg free
   561   000654                     
   562                           ;main.c: 40:     LCD_command(0xC0);
   563   000654  0EC0               	movlw	192
   564   000656  ECC6  F003         	call	_LCD_command
   565   00065A                     
   566                           ;main.c: 41:     LCD_write_string(var2);
   567   00065A  0E17               	movlw	low main@var2
   568   00065C  6E08               	movwf	LCD_write_string@str^0,c
   569   00065E  EC64  F003         	call	_LCD_write_string	;wreg free
   570   000662                     l27:
   571   000662  FFFF               	dw	65535	; assembler added errata NOP
   572   000664  EF31  F003         	goto	l27
   573   000668  EFFE  F01F         	goto	start
   574   00066C                     __end_of_main:
   575                           	callstack 0
   576                           
   577 ;; *************** function _init_LCD *****************
   578 ;; Defined at:
   579 ;;		line 57 in file "main.c"
   580 ;; Parameters:    Size  Location     Type
   581 ;;		None
   582 ;; Auto vars:     Size  Location     Type
   583 ;;		None
   584 ;; Return value:  Size  Location     Type
   585 ;;                  1    wreg      void 
   586 ;; Registers used:
   587 ;;		wreg, status,2, status,0, cstack
   588 ;; Tracked objects:
   589 ;;		On entry : 0/0
   590 ;;		On exit  : 0/0
   591 ;;		Unchanged: 0/0
   592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   593 ;;      Params:         0       0       0       0       0       0       0
   594 ;;      Locals:         0       0       0       0       0       0       0
   595 ;;      Temps:          0       0       0       0       0       0       0
   596 ;;      Totals:         0       0       0       0       0       0       0
   597 ;;Total ram usage:        0 bytes
   598 ;; Hardware stack levels used: 1
   599 ;; Hardware stack levels required when called: 2
   600 ;; This function calls:
   601 ;;		_LCD_command
   602 ;;		_msdelay
   603 ;; This function is called by:
   604 ;;		_main
   605 ;; This function uses a non-reentrant model
   606 ;;
   607                           
   608                           	psect	text1
   609   000718                     __ptext1:
   610                           	callstack 0
   611   000718                     _init_LCD:
   612                           	callstack 0
   613   000718  FFFF               	dw	65535	; assembler added errata NOP
   614   00071A                     
   615                           ;main.c: 58:     LCD_command(0x38);
   616   00071A  0E38               	movlw	56
   617   00071C  ECC6  F003         	call	_LCD_command
   618                           
   619                           ;main.c: 59:     msdelay(15);
   620   000720  0E00               	movlw	0
   621   000722  6E02               	movwf	(msdelay@time+1)^0,c
   622   000724  0E0F               	movlw	15
   623   000726  6E01               	movwf	msdelay@time^0,c
   624   000728  EC36  F003         	call	_msdelay	;wreg free
   625                           
   626                           ;main.c: 60:     LCD_command(0x01);
   627   00072C  0E01               	movlw	1
   628   00072E  ECC6  F003         	call	_LCD_command
   629                           
   630                           ;main.c: 61:     msdelay(15);
   631   000732  0E00               	movlw	0
   632   000734  6E02               	movwf	(msdelay@time+1)^0,c
   633   000736  0E0F               	movlw	15
   634   000738  6E01               	movwf	msdelay@time^0,c
   635   00073A  EC36  F003         	call	_msdelay	;wreg free
   636                           
   637                           ;main.c: 62:     LCD_command(0x0C);
   638   00073E  0E0C               	movlw	12
   639   000740  ECC6  F003         	call	_LCD_command
   640                           
   641                           ;main.c: 63:     msdelay(15);
   642   000744  0E00               	movlw	0
   643   000746  6E02               	movwf	(msdelay@time+1)^0,c
   644   000748  0E0F               	movlw	15
   645   00074A  6E01               	movwf	msdelay@time^0,c
   646   00074C  EC36  F003         	call	_msdelay	;wreg free
   647                           
   648                           ;main.c: 64:     LCD_command(0x80);
   649   000750  0E80               	movlw	128
   650   000752  ECC6  F003         	call	_LCD_command
   651                           
   652                           ;main.c: 65:     msdelay(15);
   653   000756  0E00               	movlw	0
   654   000758  6E02               	movwf	(msdelay@time+1)^0,c
   655   00075A  0E0F               	movlw	15
   656   00075C  6E01               	movwf	msdelay@time^0,c
   657   00075E  EC36  F003         	call	_msdelay	;wreg free
   658   000762  0012               	return		;funcret
   659   000764  FFFF               	dw	65535	; errata NOP
   660   000766                     __end_of_init_LCD:
   661                           	callstack 0
   662                           
   663 ;; *************** function _LCD_command *****************
   664 ;; Defined at:
   665 ;;		line 70 in file "main.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;  cmd             1    wreg     unsigned char 
   668 ;; Auto vars:     Size  Location     Type
   669 ;;  cmd             1    6[COMRAM] unsigned char 
   670 ;; Return value:  Size  Location     Type
   671 ;;                  1    wreg      void 
   672 ;; Registers used:
   673 ;;		wreg, status,2, status,0, cstack
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   679 ;;      Params:         0       0       0       0       0       0       0
   680 ;;      Locals:         1       0       0       0       0       0       0
   681 ;;      Temps:          0       0       0       0       0       0       0
   682 ;;      Totals:         1       0       0       0       0       0       0
   683 ;;Total ram usage:        1 bytes
   684 ;; Hardware stack levels used: 1
   685 ;; Hardware stack levels required when called: 1
   686 ;; This function calls:
   687 ;;		_msdelay
   688 ;; This function is called by:
   689 ;;		_main
   690 ;;		_init_LCD
   691 ;; This function uses a non-reentrant model
   692 ;;
   693                           
   694                           	psect	text2
   695   00078C                     __ptext2:
   696                           	callstack 0
   697   00078C                     _LCD_command:
   698                           	callstack 0
   699   00078C  FFFF               	dw	65535	; assembler added errata NOP
   700                           
   701                           ;incstack = 0
   702                           ;LCD_command@cmd stored from wreg
   703   00078E  6E07               	movwf	LCD_command@cmd^0,c
   704   000790                     
   705                           ;main.c: 71:     PORTD = cmd;
   706   000790  C007  FF83         	movff	LCD_command@cmd,3971	;volatile
   707   000794                     
   708                           ;main.c: 72:     PORTEbits.RE0 = 0;
   709   000794  9084               	bcf	132,0,c	;volatile
   710   000796                     
   711                           ;main.c: 73:     PORTEbits.RE1 = 0;
   712   000796  9284               	bcf	132,1,c	;volatile
   713   000798                     
   714                           ;main.c: 74:     PORTEbits.RE2 = 1;
   715   000798  8484               	bsf	132,2,c	;volatile
   716   00079A                     
   717                           ;main.c: 75:     msdelay(15);
   718   00079A  0E00               	movlw	0
   719   00079C  6E02               	movwf	(msdelay@time+1)^0,c
   720   00079E  0E0F               	movlw	15
   721   0007A0  6E01               	movwf	msdelay@time^0,c
   722   0007A2  EC36  F003         	call	_msdelay	;wreg free
   723   0007A6                     
   724                           ;main.c: 76:     PORTEbits.RE2 = 0;
   725   0007A6  9484               	bcf	132,2,c	;volatile
   726   0007A8  0012               	return		;funcret
   727   0007AA  FFFF               	dw	65535	; errata NOP
   728   0007AC                     __end_of_LCD_command:
   729                           	callstack 0
   730                           
   731 ;; *************** function _LCD_write_string *****************
   732 ;; Defined at:
   733 ;;		line 92 in file "main.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;  str             1    7[COMRAM] PTR unsigned char 
   736 ;;		 -> main@var2(10), main@var1(12), 
   737 ;; Auto vars:     Size  Location     Type
   738 ;;  i               2    8[COMRAM] int 
   739 ;; Return value:  Size  Location     Type
   740 ;;                  1    wreg      void 
   741 ;; Registers used:
   742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   743 ;; Tracked objects:
   744 ;;		On entry : 0/0
   745 ;;		On exit  : 0/0
   746 ;;		Unchanged: 0/0
   747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   748 ;;      Params:         1       0       0       0       0       0       0
   749 ;;      Locals:         2       0       0       0       0       0       0
   750 ;;      Temps:          0       0       0       0       0       0       0
   751 ;;      Totals:         3       0       0       0       0       0       0
   752 ;;Total ram usage:        3 bytes
   753 ;; Hardware stack levels used: 1
   754 ;; Hardware stack levels required when called: 2
   755 ;; This function calls:
   756 ;;		_LCD_data
   757 ;;		_msdelay
   758 ;; This function is called by:
   759 ;;		_main
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           	psect	text3
   764   0006C8                     __ptext3:
   765                           	callstack 0
   766   0006C8                     _LCD_write_string:
   767                           	callstack 0
   768   0006C8  FFFF               	dw	65535	; assembler added errata NOP
   769   0006CA                     
   770                           ;main.c: 93:     int i = 0;
   771   0006CA  0E00               	movlw	0
   772   0006CC  6E0A               	movwf	(LCD_write_string@i+1)^0,c
   773   0006CE  0E00               	movlw	0
   774   0006D0  6E09               	movwf	LCD_write_string@i^0,c
   775                           
   776                           ;main.c: 94:     while (str[i] != '\0') {
   777   0006D2  EF7B  F003         	goto	l851
   778   0006D6                     l845:
   779   0006D6  FFFF               	dw	65535	; assembler added errata NOP
   780                           
   781                           ;main.c: 95:         LCD_data(str[i]);
   782   0006D8  5008               	movf	LCD_write_string@str^0,w,c
   783   0006DA  2409               	addwf	LCD_write_string@i^0,w,c
   784   0006DC  6ED9               	movwf	fsr2l,c
   785   0006DE  6ADA               	clrf	fsr2h,c
   786   0006E0  50DF               	movf	indf2,w,c
   787   0006E2  ECD6  F003         	call	_LCD_data
   788   0006E6                     
   789                           ;main.c: 96:         msdelay(15);
   790   0006E6  0E00               	movlw	0
   791   0006E8  6E02               	movwf	(msdelay@time+1)^0,c
   792   0006EA  0E0F               	movlw	15
   793   0006EC  6E01               	movwf	msdelay@time^0,c
   794   0006EE  EC36  F003         	call	_msdelay	;wreg free
   795   0006F2                     
   796                           ;main.c: 97:         i++;
   797   0006F2  4A09               	infsnz	LCD_write_string@i^0,f,c
   798   0006F4  2A0A               	incf	(LCD_write_string@i+1)^0,f,c
   799   0006F6                     l851:
   800   0006F6  FFFF               	dw	65535	; assembler added errata NOP
   801                           
   802                           ;main.c: 94:     while (str[i] != '\0') {
   803   0006F8  5008               	movf	LCD_write_string@str^0,w,c
   804   0006FA  2409               	addwf	LCD_write_string@i^0,w,c
   805   0006FC  6ED9               	movwf	fsr2l,c
   806   0006FE  6ADA               	clrf	fsr2h,c
   807   000700  50DF               	movf	indf2,w,c
   808   000702  A4D8               	btfss	status,2,c
   809   000704  EF86  F003         	goto	u81
   810   000708  EF89  F003         	goto	u80
   811   00070C                     u81:
   812   00070C  FFFF               	dw	65535	; assembler added errata NOP
   813   00070E  EF6B  F003         	goto	l845
   814   000712                     u80:
   815   000712  FFFF               	dw	65535	; assembler added errata NOP
   816   000714  0012               	return		;funcret
   817   000716  FFFF               	dw	65535	; errata NOP
   818   000718                     __end_of_LCD_write_string:
   819                           	callstack 0
   820                           
   821 ;; *************** function _LCD_data *****************
   822 ;; Defined at:
   823 ;;		line 81 in file "main.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;  data            1    wreg     unsigned char 
   826 ;; Auto vars:     Size  Location     Type
   827 ;;  data            1    6[COMRAM] unsigned char 
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      void 
   830 ;; Registers used:
   831 ;;		wreg, status,2, status,0, cstack
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   837 ;;      Params:         0       0       0       0       0       0       0
   838 ;;      Locals:         1       0       0       0       0       0       0
   839 ;;      Temps:          0       0       0       0       0       0       0
   840 ;;      Totals:         1       0       0       0       0       0       0
   841 ;;Total ram usage:        1 bytes
   842 ;; Hardware stack levels used: 1
   843 ;; Hardware stack levels required when called: 1
   844 ;; This function calls:
   845 ;;		_msdelay
   846 ;; This function is called by:
   847 ;;		_LCD_write_string
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           	psect	text4
   852   0007AC                     __ptext4:
   853                           	callstack 0
   854   0007AC                     _LCD_data:
   855                           	callstack 0
   856   0007AC  FFFF               	dw	65535	; assembler added errata NOP
   857                           
   858                           ;incstack = 0
   859                           ;LCD_data@data stored from wreg
   860   0007AE  6E07               	movwf	LCD_data@data^0,c
   861   0007B0                     
   862                           ;main.c: 82:     PORTD = data;
   863   0007B0  C007  FF83         	movff	LCD_data@data,3971	;volatile
   864   0007B4                     
   865                           ;main.c: 83:     PORTEbits.RE0 = 1;
   866   0007B4  8084               	bsf	132,0,c	;volatile
   867   0007B6                     
   868                           ;main.c: 84:     PORTEbits.RE1 = 0;
   869   0007B6  9284               	bcf	132,1,c	;volatile
   870   0007B8                     
   871                           ;main.c: 85:     PORTEbits.RE2 = 1;
   872   0007B8  8484               	bsf	132,2,c	;volatile
   873   0007BA                     
   874                           ;main.c: 86:     msdelay(15);
   875   0007BA  0E00               	movlw	0
   876   0007BC  6E02               	movwf	(msdelay@time+1)^0,c
   877   0007BE  0E0F               	movlw	15
   878   0007C0  6E01               	movwf	msdelay@time^0,c
   879   0007C2  EC36  F003         	call	_msdelay	;wreg free
   880   0007C6                     
   881                           ;main.c: 87:     PORTEbits.RE2 = 0;
   882   0007C6  9484               	bcf	132,2,c	;volatile
   883   0007C8  0012               	return		;funcret
   884   0007CA  FFFF               	dw	65535	; errata NOP
   885   0007CC                     __end_of_LCD_data:
   886                           	callstack 0
   887                           
   888 ;; *************** function _msdelay *****************
   889 ;; Defined at:
   890 ;;		line 48 in file "main.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;  time            2    0[COMRAM] unsigned int 
   893 ;; Auto vars:     Size  Location     Type
   894 ;;  j               2    4[COMRAM] unsigned int 
   895 ;;  i               2    2[COMRAM] unsigned int 
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      void 
   898 ;; Registers used:
   899 ;;		wreg, status,2, status,0
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   905 ;;      Params:         2       0       0       0       0       0       0
   906 ;;      Locals:         4       0       0       0       0       0       0
   907 ;;      Temps:          0       0       0       0       0       0       0
   908 ;;      Totals:         6       0       0       0       0       0       0
   909 ;;Total ram usage:        6 bytes
   910 ;; Hardware stack levels used: 1
   911 ;; This function calls:
   912 ;;		Nothing
   913 ;; This function is called by:
   914 ;;		_main
   915 ;;		_init_LCD
   916 ;;		_LCD_command
   917 ;;		_LCD_data
   918 ;;		_LCD_write_string
   919 ;; This function uses a non-reentrant model
   920 ;;
   921                           
   922                           	psect	text5
   923   00066C                     __ptext5:
   924                           	callstack 0
   925   00066C                     _msdelay:
   926                           	callstack 0
   927   00066C  FFFF               	dw	65535	; assembler added errata NOP
   928   00066E                     
   929                           ;main.c: 49:     unsigned int i, j;;main.c: 50:     for (i = 0; i < time; i++) {
   930   00066E  0E00               	movlw	0
   931   000670  6E04               	movwf	(msdelay@i+1)^0,c
   932   000672  0E00               	movlw	0
   933   000674  6E03               	movwf	msdelay@i^0,c
   934   000676  EF54  F003         	goto	l815
   935   00067A                     l803:
   936   00067A  FFFF               	dw	65535	; assembler added errata NOP
   937                           
   938                           ;main.c: 51:         for (j = 0; j < 710; j++);
   939   00067C  0E00               	movlw	0
   940   00067E  6E06               	movwf	(msdelay@j+1)^0,c
   941   000680  0E00               	movlw	0
   942   000682  6E05               	movwf	msdelay@j^0,c
   943   000684                     l809:
   944   000684  FFFF               	dw	65535	; assembler added errata NOP
   945   000686  4A05               	infsnz	msdelay@j^0,f,c
   946   000688  2A06               	incf	(msdelay@j+1)^0,f,c
   947   00068A  0EC6               	movlw	198
   948   00068C  5C05               	subwf	msdelay@j^0,w,c
   949   00068E  0E02               	movlw	2
   950   000690  5806               	subwfb	(msdelay@j+1)^0,w,c
   951   000692  A0D8               	btfss	status,0,c
   952   000694  EF4E  F003         	goto	u61
   953   000698  EF51  F003         	goto	u60
   954   00069C                     u61:
   955   00069C  FFFF               	dw	65535	; assembler added errata NOP
   956   00069E  EF42  F003         	goto	l809
   957   0006A2                     u60:
   958   0006A2  FFFF               	dw	65535	; assembler added errata NOP
   959   0006A4                     
   960                           ;main.c: 52:     }
   961   0006A4  4A03               	infsnz	msdelay@i^0,f,c
   962   0006A6  2A04               	incf	(msdelay@i+1)^0,f,c
   963   0006A8                     l815:
   964   0006A8  FFFF               	dw	65535	; assembler added errata NOP
   965   0006AA  5001               	movf	msdelay@time^0,w,c
   966   0006AC  5C03               	subwf	msdelay@i^0,w,c
   967   0006AE  5002               	movf	(msdelay@time+1)^0,w,c
   968   0006B0  5804               	subwfb	(msdelay@i+1)^0,w,c
   969   0006B2  A0D8               	btfss	status,0,c
   970   0006B4  EF5E  F003         	goto	u71
   971   0006B8  EF61  F003         	goto	u70
   972   0006BC                     u71:
   973   0006BC  FFFF               	dw	65535	; assembler added errata NOP
   974   0006BE  EF3D  F003         	goto	l803
   975   0006C2                     u70:
   976   0006C2  FFFF               	dw	65535	; assembler added errata NOP
   977   0006C4  0012               	return		;funcret
   978   0006C6  FFFF               	dw	65535	; errata NOP
   979   0006C8                     __end_of_msdelay:
   980                           	callstack 0
   981                           
   982                           	psect	smallconst
   983   000600                     __psmallconst:
   984                           	callstack 0
   985   000600  00                 	db	0
   986   000601  00                 	db	0	; dummy byte at the end
   987   000600                     __smallconst    set	__psmallconst
   988   000600                     __mediumconst   set	__psmallconst
   989   000000                     __activetblptr  equ	0
   990                           
   991                           	psect	rparam
   992   000001                     ___rparam_used  equ	1
   993   000000                     ___param_bank   equ	0
   994   000000                     __Lparam        equ	__Lrparam
   995   000000                     __Hparam        equ	__Hrparam
   996                           
   997                           	psect	config
   998                           
   999                           ;Config register CONFIG2L @ 0x300002
  1000                           ;	unspecified, using default values
  1001                           ;	Power-up Timer Enable bit
  1002                           ;	PWRT = 0x1, unprogrammed default
  1003                           ;	Brown-out Reset Enable bit
  1004                           ;	BOR = 0x1, unprogrammed default
  1005                           ;	Brown-out Reset Voltage bits
  1006                           ;	BORV = 0x3, unprogrammed default
  1007   300002                     	org	3145730
  1008   300002  0F                 	db	15
  1009                           
  1010                           ;Config register CONFIG2H @ 0x300003
  1011                           ;	Watchdog Timer Enable bit
  1012                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1013                           ;	Watchdog Timer Postscale Select bits
  1014                           ;	WDTPS = 0x7, unprogrammed default
  1015   300003                     	org	3145731
  1016   300003  0E                 	db	14
  1017                           
  1018                           ;Config register CONFIG4L @ 0x300006
  1019                           ;	Stack Full/Underflow Reset Enable bit
  1020                           ;	STVR = 0x1, unprogrammed default
  1021                           ;	Low-Voltage ICSP Enable bit
  1022                           ;	LVP = OFF, Low-Voltage ICSP disabled
  1023                           ;	Background Debugger Enable bit
  1024                           ;	DEBUG = 0x1, unprogrammed default
  1025   300006                     	org	3145734
  1026   300006  81                 	db	129
  1027                           
  1028                           ; Padding undefined space
  1029   300007                     	org	3145735
  1030   300007  FF                 	db	255
  1031                           tosu	equ	0xFFF
  1032                           tosh	equ	0xFFE
  1033                           tosl	equ	0xFFD
  1034                           stkptr	equ	0xFFC
  1035                           pclatu	equ	0xFFB
  1036                           pclath	equ	0xFFA
  1037                           pcl	equ	0xFF9
  1038                           tblptru	equ	0xFF8
  1039                           tblptrh	equ	0xFF7
  1040                           tblptrl	equ	0xFF6
  1041                           tablat	equ	0xFF5
  1042                           prodh	equ	0xFF4
  1043                           prodl	equ	0xFF3
  1044                           indf0	equ	0xFEF
  1045                           postinc0	equ	0xFEE
  1046                           postdec0	equ	0xFED
  1047                           preinc0	equ	0xFEC
  1048                           plusw0	equ	0xFEB
  1049                           fsr0h	equ	0xFEA
  1050                           fsr0l	equ	0xFE9
  1051                           wreg	equ	0xFE8
  1052                           indf1	equ	0xFE7
  1053                           postinc1	equ	0xFE6
  1054                           postdec1	equ	0xFE5
  1055                           preinc1	equ	0xFE4
  1056                           plusw1	equ	0xFE3
  1057                           fsr1h	equ	0xFE2
  1058                           fsr1l	equ	0xFE1
  1059                           bsr	equ	0xFE0
  1060                           indf2	equ	0xFDF
  1061                           postinc2	equ	0xFDE
  1062                           postdec2	equ	0xFDD
  1063                           preinc2	equ	0xFDC
  1064                           plusw2	equ	0xFDB
  1065                           fsr2h	equ	0xFDA
  1066                           fsr2l	equ	0xFD9
  1067                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        22
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      54
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    LCD_write_string@str	PTR unsigned char  size(1) Largest target is 12
		 -> main@var1(COMRAM[12]), main@var2(COMRAM[10]), 


Critical Paths under _main in COMRAM

    _main->_LCD_write_string
    _init_LCD->_LCD_command
    _LCD_command->_msdelay
    _LCD_write_string->_LCD_data
    _LCD_data->_msdelay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0     835
                                             10 COMRAM    22    22      0
                        _LCD_command
                   _LCD_write_string
                           _init_LCD
                            _msdelay
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             0     0      0     231
                        _LCD_command
                            _msdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_command                                          1     1      0     130
                                              6 COMRAM     1     1      0
                            _msdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_write_string                                     3     2      1     323
                                              7 COMRAM     3     2      1
                           _LCD_data
                            _msdelay
 ---------------------------------------------------------------------------------
 (2) _LCD_data                                             1     1      0     130
                                              6 COMRAM     1     1      0
                            _msdelay
 ---------------------------------------------------------------------------------
 (1) _msdelay                                              6     4      2     101
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_command
     _msdelay
   _LCD_write_string
     _LCD_data
       _msdelay
     _msdelay
   _init_LCD
     _LCD_command
     _msdelay
   _msdelay

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            1535      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITBIGSFRl         131      0       0      0.0%
BITBIGSFRh         123      0       0      0.0%
BITCOMRAM           95      0       0      0.0%
COMRAM              95     32      54     56.8%
STACK                0      0       0      0.0%
DATA                 0      0      54      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Sun Apr 27 13:07:56 2025

                                            l41 0762                                              l27 0662  
                                            l44 07A8                                              l28 0664  
                                            l53 0714                                              l38 06C4  
                                            l47 07C8                                              u60 06A2  
                                            u61 069C                                              u70 06C2  
                                            u71 06BC                                              u80 0712  
                                            u81 070C                                              u91 060E  
                                           l801 066E                                             l811 068A  
                                           l803 067A                                             l813 06A4  
                                           l821 0796                                             l815 06A8  
                                           l831 07B4                                             l823 0798  
                                           l809 0684                                             l833 07B6  
                                           l825 079A                                             l817 0790  
                                           l841 071A                                             l835 07B8  
                                           l851 06F6                                             l843 06CA  
                                           l827 07A6                                             l819 0794  
                                           l837 07BA                                             l829 07B0  
                                           l845 06D6                                             l861 0630  
                                           l853 0602                                             l839 07C6  
                                           l847 06E6                                             l871 065A  
                                           l863 0634                                             l855 0628  
                                           l849 06F2                                             l865 0640  
                                           l857 062C                                             l867 0648  
                                           l859 062E                                             l869 0654  
                                           u101 0620                                             wreg 0FE8  
                                  ?_LCD_command 0001                                            _main 0602  
                                          fsr2h 0FDA                                            indf2 0FDF  
                                          fsr1l 0FE1                                            fsr2l 0FD9  
                                          start 3FFC                                    ___param_bank 0000  
                              __end_of_LCD_data 07CC                                           ?_main 0001  
                                         _PORTD 0F83                                           _TRISD 0F95  
                                         _TRISE 0F96                                 __end_of_msdelay 06C8  
                                         tablat 0FF5                                           plusw1 0FE3  
                                         plusw2 0FDB                                           status 0FD8  
                               __initialization 0766                                    __end_of_main 066C  
                             ?_LCD_write_string 0008                                          ??_main 000B  
                                 __activetblptr 0000                              ??_LCD_write_string 0009  
                                        _ADCON1 0FC1                                __end_of_init_LCD 0766  
                                  LCD_data@data 0007                                          isa$std 0001  
                                  __pdataCOMRAM 0021                                       ??_msdelay 0003  
                                  __mediumconst 0600                                          tblptrh 0FF7  
                                        tblptrl 0FF6                                          tblptru 0FF8  
                                    __accesstop 0060                         __end_of__initialization 0786  
                                     ?_LCD_data 0001                                   ___rparam_used 0001  
                                __pcstackCOMRAM 0001                                      ??_LCD_data 0007  
                                   msdelay@time 0001                                       ?_init_LCD 0001  
                                       __Hparam 0000                                         __Lparam 0000  
                                  __psmallconst 0600                                         __pcinit 0766  
                                       __ramtop 0600                                         __ptext0 0602  
                                       __ptext1 0718                                         __ptext2 078C  
                                       __ptext3 06C8                                         __ptext4 07AC  
                                       __ptext5 066C                                         _msdelay 066C  
                          end_of_initialization 0786                                      ??_init_LCD 0008  
                                       postdec1 0FE5                                         postinc0 0FEE  
                                     _PORTEbits 0F84                                   __pidataCOMRAM 07CC  
                           start_initialization 0766                                   ??_LCD_command 0007  
                           LCD_write_string@str 0008                                _LCD_write_string 06C8  
                           __end_of_LCD_command 07AC                                     __smallconst 0600  
                                      ?_msdelay 0001                                        _LCD_data 07AC  
                                     main@F5595 0021                                       main@F5597 002D  
                                     copy_data0 077A                                     _LCD_command 078C  
                                      __Hrparam 0000                                        __Lrparam 0000  
                                      _init_LCD 0718                                        isa$xinst 0000  
                                      main@var1 000B                                        main@var2 0017  
                      __end_of_LCD_write_string 0718                               LCD_write_string@i 0009  
                                      msdelay@i 0003                                        msdelay@j 0005  
                                LCD_command@cmd 0007  
